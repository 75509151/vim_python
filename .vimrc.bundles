" 非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible
filetype off " required! turn off

" ----------------------------------------------------------------------------
" 使用 vim-plug 管理插件
" vim plugin bundle control, command model
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs 
"    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
" ----------------------------------------------------------------------------
" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

Plug 'rdnetto/YCM-Generator'

" python docstring
Plug 'heavenshell/vim-pydocstring'

" 自动补全单引号，双引号等
"Plug 'Raimondi/delimitMate'

" 快速注释
Plug 'scrooloose/nerdcommenter'

" 代码格式话
"Plug 'google/vim-codefmt'

" 显示函数说明 
Plug 'Shougo/echodoc.vim'

" 快速查找
"Plug 'Yggdroot/LeaderF'

" python 语法检查 vim8可以使用 w0rp/ale
" Plug 'scrooloose/syntastic'
Plug 'dense-analysis/ale'

" quick selection and edit
" expandregion
" 选中区块
Plug 'terryma/vim-expand-region'
" 多光标选中编辑
" multiplecursors
Plug 'terryma/vim-multiple-cursors'

" git 修改状态
Plug 'mhinz/vim-signify'

" 
Plug 'octol/vim-cpp-enhanced-highlight'

" quick locate file or function
" 文件搜索
" change to https://github.com/ctrlpvim/ctrlp.vim
" ctrlp ctrlpfunky 使用 LeaderF代替
 Plug 'ctrlpvim/ctrlp.vim' | Plug 'tacahiroy/ctrlp-funky'

" ctrlsf
" 类似sublimetext的搜索
" In CtrlSF window:
" 回车/o, 打开
" t       在tab中打开(建议)
" T - Lkie t but focus CtrlSF window instead of opened new tab.
" q - Quit CtrlSF window.
"ubuntu apt-get install silversearcher-ag
Plug 'dyng/ctrlsf.vim'
" incsearch
" Plug 'haya14busa/incsearch.vim'
" map /  <Plug>(incsearch-forward)
" map ?  <Plug>(incsearch-backward)
" map g/ <Plug>(incsearch-stay)

Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }

Plug 'vim-scripts/vcscommand.vim'
" ubuntu sudo apt-get install exuberant-ctags
Plug 'vim-scripts/taglist.vim'

Plug 'Yggdroot/indentLine'
"pip install autopep8
Plug 'tell-k/vim-autopep8'


"Plug 'klen/python-mode'
"Plug 'python-mode/python-mode'

" auto complete
" 代码自动补全
" 迄今为止用到的最好的自动VIM自动补全插件
" 重启 :YcmRestartServer 
Plug 'Valloric/YouCompleteMe' "need vim version>7.4

" js 
Plug 'mattn/emmet-vim'

" css
Plug 'hail2u/vim-css3-syntax'
" js 语法高亮
Plug 'pangloss/vim-javascript'

"JavaScript omnifunc
Plug 'marijnh/tern_for_vim'
call plug#end()            " required


" ################### NERDTree config ###################
map <F2> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&b:NERDTreeType == "primary") | q | endif

" ################### Taglist config ###################
let Tlist_Exit_OnlyWindow = 1          "如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Use_Right_Window = 1         "在右侧窗口中显示taglist窗口
let Tlist_Show_One_File = 1            "不同时显示多个文件的taglist

map <F1> :TlistToggle<cr> 


" ################### 自动补全 ###################

" YouCompleteMe {{{
    "youcompleteme  默认tab  s-tab 和自动补全冲突
    "let g:ycm_key_list_select_completion=['<c-n>']
    let g:ycm_key_list_select_completion = ['<Down>']
    "let g:ycm_key_list_previous_completion=['<c-p>']
    let g:ycm_key_list_previous_completion = ['<Up>']
    let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
    let g:ycm_complete_in_strings = 1   "在字符串输入中也能补全
    let g:ycm_use_ultisnips_completer = 1 "提示UltiSnips
    let g:ycm_collect_identifiers_from_comments_and_strings = 1   "注释和字符串中的文字也会被收入补全
    let g:ycm_collect_identifiers_from_tags_files = 1
    "let g:ycm_max_num_candidates = 50
    "let g:ycm_max_num_identifier_candidates = 10
    " 开启语法关键字补全
    let g:ycm_seed_identifiers_with_syntax=1
    " 回车作为选中
    let g:ycm_key_list_stop_completion = ['<CR>']

    "let g:ycm_seed_identifiers_with_syntax=1   "语言关键字补全, 不过python关键字都很短，所以，需要的自己打开

    let g:ycm_semantic_triggers =  {
           \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
           \ 'cs,lua,javascript': ['re!\w{2}'],
           \ }

    " 避免编辑白名单外的文件类型时 YCM也在那分析半天
    "let g:ycm_filetype_whitelist = {
			"\ "c":1,
			"\ "cpp":1,
			"\ "objc":1,
			"\ "sh":1,
			"\ "zsh":1,
			"\ "zimbu":1,
			"\ }

    " 跳转到定义处, 分屏打开
    let g:ycm_goto_buffer_command = 'horizontal-split'
    let g:ycm_register_as_syntastic_checker = 0
    " nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
    nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
    nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>

    " 引入，可以补全系统，以及python的第三方包 针对新老版本YCM做了兼容
    " old version
    let g:ycm_global_ycm_extra_conf = "~/.ycm_extra_conf.py"

    " 直接触发自动补全 insert模式下
    " let g:ycm_key_invoke_completion = '<C-Space>'
    
    " 黑名单,不启用
    let g:ycm_filetype_blacklist = {
        \ 'tagbar' : 1,
        \ 'gitcommit' : 1,
        \}


    " 关闭自动弹出函数预览，采用其他预览方式
    " set completeopt=menu,menuone
    " let g:ycm_add_preview_to_completeopt = 0

    " 关闭诊断信息, 采用其他插件来完成自动/非自动代码静态检查。
    let g:ycm_show_diagnostics_ui = 0
" }}}

"""""""""""""""""""""""
" ale config 
""""""""""""""""""""

let g:ale_linters_explicit = 1
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
"let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:airline#extensions#ale#enabled = 1

let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
let g:ale_c_cppcheck_options = ''
let g:ale_cpp_cppcheck_options = ''

" Set this setting in vimrc if you want to fix files automatically on save.
" This is off by default.
let g:ale_fix_on_save = 0

" only check python. Check Python files with flake8 and pylint.
"let b:ale_linters = ['pylint']
" Fix Python files with autopep8 and yapf.
"let b:ale_fixers = ['autopep8']

let g:ale_linters = {'javascript': ['eslint'],'python': ["pylint"],
            \ 'cpp': ['cppcheck'],
            \ 'c': ['cppcheck'],
            \}

"始终开启标志列
let g:ale_sign_column_always = 1
let g:ale_set_highlights = 0
"自定义error和warning图标
""let g:ale_sign_error = '✗'                                                                                                                                                                                   
""let g:ale_sign_warning = '⚡ '
""在vim自带的状态栏中整合ale
"let g:ale_statusline_format = ['✗ %d', '⚡  %d', '✔ OK']
""显示Linter名称,出错或警告等相关信息
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
"let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

"普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
nmap sp <Plug>(ale_previous_wrap)
nmap sn <Plug>(ale_next_wrap)
"<Leader>s触发/关闭语法检查
nmap <Leader>s :ALEToggle<CR>
"<Leader>d查看错误或警告的详细信息                                                                                                                                                                           
nmap <Leader>d :ALEDetail<CR>
"文件内容发生变化时不进行检查
"let g:ale_lint_on_text_changed = 'never'
"打开文件时不进行检查
let g:ale_lint_on_enter = 0

"在quickfix中显示错误信息
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1

let g:ale_open_list = 1
" Set this if you want to.
" This can be useful if you are combining ALE with
" some other plugin which sets quickfix errors, etc.
let g:ale_keep_list_window_open = 1

"" 颜色风格
let g:ale_sign_error = "\ue009\ue009"
hi! clear SpellBad
hi! clear SpellCap
hi! clear SpellRare
hi! SpellBad gui=undercurl guisp=red
hi! SpellCap gui=undercurl guisp=blue
hi! SpellRare gui=undercurl guisp=magenta

"""""""""""""""""""""""""
" ctrlsf confi
"""""""""""""""""""""""""

let g:ctrlsf_ackprg = 'ag'   " 设置ctrlsf 使用ag
nmap     <C-F>f <Plug>CtrlSFPrompt
vmap     <C-F>f <Plug>CtrlSFVwordPath
vmap     <C-F>F <Plug>CtrlSFVwordExec
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath
nnoremap <C-F>o :CtrlSFOpen<CR>
nnoremap <C-F>t :CtrlSFToggle<CR>
inoremap <C-F>t <Esc>:CtrlSFToggle<CR>

"CtrlSF close itself when you are opening some file
let g:ctrlsf_auto_close = 0
"defines default case-sensitivity in search, smart is works the same as vim (default)
"let g:ctrlsf_case_sensitive = 'no'


""""""""""""""""""""""""
"indentline config
""""""""""""""""""""""
"缩进指示线"
let g:indentLine_char='┆'
let g:indentLine_enabled = 1

""""""""""""""""""""""""
"autopep8 config
""""""""""""""""""""""
let g:autopep8_disable_show_diff=1

"################## python-mode ######
"取消代码折叠
let g:pymode_folding = 0
"取消最大列高亮
let g:pymode_options_colorcolumn = 0 
"设置最大行
let g:pymode_options_max_line_length = 79

"启用python-mode内置的python文档，使用K进行查找
let g:pymode_doc = 1
let g:pymode_doc_bind = '?'

"################################
"########### vim-autopep8
"################################

let g:autopep8_ignore="E501,W293"
"autocmd FileType python noremap <buffer> <F8> :call Autopep8()<CR>



"############## LeaderF ###########

" ALT+P 打开函数搜索，ALT+N 打开 Buffer 搜索
let g:Lf_ShortcutF = '<c-p>'
let g:Lf_ShortcutB = '<m-n>'
noremap <c-n> :LeaderfMru<cr>
noremap <m-p> :LeaderfFunction!<cr>
noremap <m-n> :LeaderfBuffer<cr>
noremap <m-m> :LeaderfTag<cr>
let g:Lf_StlSeparator = { 'left': '', 'right': '', 'font': '' }

let g:Lf_RootMarkers = ['.project', '.root', '.svn', '.git']
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_WindowHeight = 0.30
let g:Lf_CacheDirectory = expand('~/.vim/cache')
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_StlColorscheme = 'powerline'
let g:Lf_PreviewResult = {'Function':0, 'BufTag':0}
